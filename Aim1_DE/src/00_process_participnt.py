import os
import sys

import pandas as pd

## RNA tableï¼Œ generated by the following SQL
# SELECT
#     t0.sample_id AS sample_id,
#     t0.participant_id AS participant_id,
#     t0.visit_month AS visit_month,
#
#     t3.updrs1_ment_behav_mood_score AS updrs1_ment_behav_mood_score,
#     t3.updrs2_adl_score AS updrs2_adl_score,
#     t3.updrs3_motor_examination_score AS updrs3_motor_examination_score,
#     t3.updrs4_therapy_complications_score AS updrs4_therapy_complications_score,
#     t4.upsit_total_score AS upsit_total_score,
#     t5.moca_total_score AS moca_total_score,
#
#     t0.BAM AS BAM
# FROM
# (
#     SELECT participant_id, sample_id, visit_month, BAM
#     FROM `amp-pd-research.2020_v2release_1218_transcriptomics.rna_seq_samples`
# ) t0 LEFT JOIN
# (
#     SELECT DISTINCT participant_id, visit_month, updrs1_ment_behav_mood_score,
#     updrs2_adl_score, updrs3_motor_examination_score, updrs4_therapy_complications_score
#     FROM `amp-pd-research.2020_v2release_1218.UPDRS`
# ) t3 USING(participant_id, visit_month) LEFT JOIN
# (
#     SELECT DISTINCT participant_id, visit_month, upsit_total_score
#     FROM `amp-pd-research.2020_v2release_1218.UPSIT`
# )
# t4 USING(participant_id, visit_month) LEFT JOIN
# (
#     SELECT DISTINCT participant_id, visit_month, moca_total_score
#     FROM `amp-pd-research.2020_v2release_1218.MOCA`
# )
# t5 USING(participant_id, visit_month)

RNA_participant_info = {}
sample_info = {}
sample_header = ["sample_id",
                 "participant_id",
                 "visit_month",
                 "updrs1_ment_behav_mood_score",
                 "updrs2_adl_score",
                 "updrs3_motor_examination_score",
                 "updrs4_therapy_complications_score",
                 "upsit_total_score",
                 "moca_total_score",
                 "BAM"
                 ]
##RNA_full_table_04212021.csv there are 8461 lines corresponding to 8461 RNAseq samples.
with open("../../data/RNA_full_table_04212021.csv", "r") as f:
    x = next(f)
    for line in f:
        line_ls = line[:-1].split(",")
        #         print(line_ls)
        participant_id = line_ls[1]
        if participant_id in RNA_participant_info:
            RNA_participant_info[participant_id] += 1
        else:
            RNA_participant_info[participant_id] = 1

        visit_month = line_ls[2]
        sample_id = line_ls[0]
        sample_info[sample_id] = "\t".join(line_ls)

print(len(RNA_participant_info))

fout = open("../../data/RAN_info_full_results_04212021_unique_id.tsv", "w")
fout.write("RNA_sample_id" + "\t" + "\t".join(sample_header) + "\n")
for id_i in sample_info:
    fout.write(id_i + "\t" + sample_info[id_i] + "\n")
fout.close()

## Participant table
# SELECT
# DISTINCT t0.participant_id AS participant_id,
#         t1.sex AS sex,
#         t1.age_at_baseline AS age_at_baseline,
#         t1.race AS race,
#         t1.ethnicity AS ethnicity,
#         t2.age_at_diagnosis AS age_at_diagnosis,
# FROM
# (
#     SELECT DISTINCT participant_id
#     FROM `amp-pd-research.2020_v2release_1218_transcriptomics.rna_seq_samples`
# ) t0 LEFT JOIN
# (
#     SELECT DISTINCT participant_id, sex, age_at_baseline, race, ethnicity
#     FROM `amp-pd-research.2020_v2release_1218.Demographics`
# ) t1 USING(participant_id) LEFT JOIN
# (
#     SELECT DISTINCT participant_id, date_of_pd_diagnosis, age_at_diagnosis
#     FROM `amp-pd-research.2020_v2release_1218.PD_Medical_History`
# ) t2 USING(participant_id)

participant_info= {}
header = ["sex", "age_at_baseline", "race", "ethnicity", "age_at_diagnosis","case_control_other_latest"]
header_n = ["sex_n", "age_at_baseline_n", "race_n", "ethnicity_n", "age_at_diagnosis_n","case_control_other_latest_n"]

with open("participant_full_table_04212021.csv","r") as f:
    next(f)
    for line in f:
        line_ls = line[:-1].split(",")
#         print(line_ls)
        participant_id = line_ls[0]
        sex = line_ls[1]
        age_at_baseline = line_ls[2]
        race = line_ls[3]
        ethnicity = line_ls[4]
        age_at_diagnosis = line_ls[5]
        case_control_other_latest = line_ls[6]
        if participant_id not in participant_info:
            participant_info[participant_id]={"sex":[sex],
                                              "age_at_baseline":[age_at_baseline],
                                              "race":[race],
                                              "ethnicity":[ethnicity],
                                              "age_at_diagnosis":[age_at_diagnosis],
                                              "case_control_other_latest":[case_control_other_latest],
                                              "sex_n": 1,
                                              "age_at_baseline_n":1,
                                              "race_n": 1,
                                              "ethnicity_n": 1,
                                              "age_at_diagnosis_n": 1,
                                              "case_control_other_latest_n":1
                                              }
        else:
            participant_info[participant_id]["sex"].append(sex)
            participant_info[participant_id]["age_at_baseline"].append(age_at_baseline)
            participant_info[participant_id]["race"].append(race)
            participant_info[participant_id]["ethnicity"].append(ethnicity)
            participant_info[participant_id]["age_at_diagnosis"].append(age_at_diagnosis)
            participant_info[participant_id]["case_control_other_latest"].append(case_control_other_latest)
print(len(participant_info))

for id_i in participant_info:
    for fea_i in header:
        participant_info[id_i][fea_i] = list(set(participant_info[id_i][fea_i]))
        if len(participant_info[id_i][fea_i])==1:
            participant_info[id_i][fea_i] = participant_info[id_i][fea_i][0]
            if participant_info[id_i][fea_i] == "NA":
                participant_info[id_i][fea_i+"_n"] = 0
        else:
            temp_fea_ls = [val_i for val_i in participant_info[id_i][fea_i] if val_i != "NA" ]
            participant_info[id_i][fea_i] = "|".join(temp_fea_ls)
            participant_info[id_i][fea_i + "_n"] = len(temp_fea_ls)


##participant_info_full_results_04212021_unique_id.csv there are 3274 lines corresponding to 3274 participants.
fout = open("participant_info_full_results_04212021_unique_id.tsv","w")
header_ls = []
for i in range(len(header)):
    header_ls.append(header[i])
    header_ls.append(header_n[i])

fout.write("participant_id"+"\t"+"\t".join(header_ls) + "\tvisit_n_RNA"+ "\n")
for id_i in participant_info:
    fout.write(id_i)
#     print(participant_info[id_i])
    for fea_i in header:
        fout.write( "\t" + participant_info[id_i][fea_i] + "\t" + str(participant_info[id_i][fea_i+ "_n"]))
    if id_i in RNA_participant_info:
        fout.write("\t" + str(RNA_participant_info[id_i]))
    else:
        fout.write("\t" + str(0))
    fout.write("\n")
fout.close()




